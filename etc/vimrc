"------------------------------------------------------------------
"---------------------------- Plug --------------------------------
"https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')

" Tmux Navigator
Plug 'christoomey/vim-tmux-navigator'

" NERDTree
" Plug 'scrooloose/nerdtree'
Plug 'preservim/nerdtree',     {'on': 'NERDTreeToggle'} " nerd tree file drawer

" NERDCommenter
Plug 'preservim/nerdcommenter'

" Rust Synatx
Plug 'rust-lang/rust.vim'

" TOML Syntax
Plug 'cespare/vim-toml'

" " C Syntax
" Plug 'vim-scripts/c.vim'

" C++ Syntax
Plug 'octol/vim-cpp-enhanced-highlight'

" Markdown Syntax
Plug 'tpope/vim-markdown'

" ARMv6/7 Assembly Syntax
Plug 'ARM9/arm-syntax-vim'
au BufNewFile,BufRead *.s,*.S set filetype=arm

" OpenCL (Open Computing Language) Syntax
Plug 'petRUShka/vim-opencl'

" Python Flake8 Linter
Plug 'nvie/vim-flake8'

" Matlab Syntax
Plug 'lazywei/vim-matlab'

" LaTeX Syntax
Plug 'lervag/vimtex'

" Haskell Syntax
Plug 'neovimhaskell/haskell-vim'

" Fuzzy searching using fzf
Plug 'junegunn/fzf.vim'

" fzf binary and runtime path files
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}

" A very fast, multi-syntax context-sensitive color name highlighter
Plug 'ap/vim-css-color'

" Highlight sass colors and color variables
Plug 'cakebaker/scss-syntax.vim'

Plug 'alvan/vim-closetag'

Plug 'tikhomirov/vim-glsl'

Plug 'chrisbra/unicode.vim'

" Plug 'patriciogonzalezvivo/vim-glslViewer'

call plug#end()

"------------------------------------------------------------------
"---------------------------- My Syntax ----------------------------
if has ("autocmd")
   filetype plugin indent on
endif

let mapleader = "\<space>"            " Map space as leader
set pastetoggle=<F9>									" Toggle between paste and nopaste mode with F9
set formatoptions-=cro                " Don't comment next line

set hidden                            " Can move away from unsaved files
set backspace=indent,eol,start

set nu rnu								            "Hybrid relative line number
set ru									              "Ruler
syntax on								              "Turns on syntax
" colo molokai
" colo Dark2
colo codedark


set background=dark
set shiftwidth=2
set softtabstop=2                   "Indent by 2 spaces when pressing <TA>
set autoindent                      "Keep indentation from previous line
set smartindent                     "Automatically inserts indentation in some cases
set cindent                         "Like smartindent, but stricter and more customizable
set tabstop=2                       "Sets tab to be 2 spaces
set expandtab
set nowrap                          "Do not visually wrap long lines
set smartcase					    "Search case-insensitive if everything is lower case
set hlsearch					    "Highlight search terms
set incsearch					    "Highlight search terms as you type
set nobackup			            "Do not create backup files
set spell spelllang=en_us           "Spell check

"Intuitive vim split jump commands
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>

"put cursor on file upon startup
autocmd VimEnter * wincmd p

" mapping for moving through files
nnoremap gT :bprev<CR>
nnoremap gt :bnext<CR>

" mapping for managing tabs
map <leader>tn :tabnew<cr>
map <leader>tq :tabclose<cr>
map <leader>tt :tabnext<cr>
map <leader>tT :tabprevious<cr>

" source ~/.vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>:nohl<cr>

"---- HDL highlighting settings---
hi link vhdlError Normal " Remove annoying highlight


" display digraphs
nnoremap <leader>hd :Capture digraphs<cr>|

" Latin subscript digraph shortcuts
execute "digraphs ks " . 0x2096 
execute "digraphs as " . 0x2090
execute "digraphs es " . 0x2091
execute "digraphs hs " . 0x2095
execute "digraphs is " . 0x1D62
execute "digraphs ks " . 0x2096
execute "digraphs ls " . 0x2097
execute "digraphs ms " . 0x2098
execute "digraphs ns " . 0x2099
execute "digraphs os " . 0x2092
execute "digraphs ps " . 0x209A
execute "digraphs rs " . 0x1D63
execute "digraphs ss " . 0x209B
execute "digraphs ts " . 0x209C
execute "digraphs us " . 0x1D64
execute "digraphs vs " . 0x1D65
execute "digraphs xs " . 0x2093

au BufNewFile, BufRead *.jxs set filetype=xml   " Use XML syntax for JXS files

"-----------------------------------------------------------------------------
"---------------------------------- RUST -------------------------------------
let g:rustfmt_autosave=1            "Auto format with rustfmt on save
let g:rust_recommended_style=0      "Disable recommended style (recommended is 4 spaces, but I like 2 spaces)
filetype indent on

"------------------------------------------------------------------
"---------------------------- Fuzzy -------------------------------
" Search files with FZF
nnoremap <c-p> :Files<cr>

"------------------------------------------------------------------
"---------------------------- NERDCommenter -----------------------
" automatically close nerd tree when you open a file
let NERDTreeQuitOnOpen = 1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

"---------------------------------------------------------------------------
"---------------------------- NERDTree Side Bar ----------------------------
"https://github.com/scrooloose/nerdtree.git
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" open and close NERDTree with ctrl-o
map <C-o> :NERDTreeToggle<CR>
" close vim with q if only NERDTree is left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('rs', 'red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('hpp', 'Magenta', 'none', '#151515', '#151515')
call NERDTreeHighlightFile('cpp', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('h', 'Magenta', 'none', '#151515', '#151515')
call NERDTreeHighlightFile('py', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('go', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('js', 'cyan', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('log', 'Red', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('txt', 'blue', 'none', 'red', '#151515')
call NERDTreeHighlightFile('ini', 'Red', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yaml', 'blue', 'none', '#3366FF', '#151515')

" Close file
nnoremap <leader>q :bp<cr>:bd #<cr>
" Toggles NERDTree side bar
map <C-o> :NERDTreeToggle<CR>
" Disables bookmarks and 'Press ? for help' text
let NERDTreeMinimalUI = 1
" Displays line numbers
let NERDTreeShowLineNumbers = 1
" Show hidden files
let NERDTreeShowHidden = 1
" Change current working dir based on file location
let NERDTreeChDirMode = 2
" Use natural sort order
let NERDTreeNaturalSort = 1
let g:NERDTreeWinSize = 35 

let g:closetag_filenames = '*.html'


:command W w
:command Q q
:command Wa wa
:command WA wa
:command Wq wq
:command WQ wq
:command Wqa wqa
:command WQa wqa
:command WQA wqa
